<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->
<grammar 
	xmlns="http://relaxng.org/ns/structure/1.0"
	xmlns:s="http://www.ascc.net/xml/schematron"
	xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
	datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
	ns="http://math.spbu.ru/drl">
	
	<!-- 
		Изменения:
		- теперь названия всех элементов начинаются с большой буквы
		- корневой элемент - один из 3х (см в <start>)
		- соответственно, добавил описания DocumentationCore и ProductDocumentation
		- в содержимое некоторых элементов oneOrMore я заменил на zeroOrMore - по-моему, это совсем необязательное ограничение

		Я не совсем уверен относительно положения словарей.
		
		Не очень хорошая идея объявлять InfelemRefGroups DocbookOrCommonDrl, и JustDocbook таким образом:
			<define name="InfElemRefGroups">
				<zeroOrMore>
				...
		Из-за этого в InfProduct и InfElement объявления InfElemRefGroup обязаны располагаться до всего остального:
			<element name="InfProduct">
				...
				<ref name="InfElemRefGroups"/>
				<ref name="DocbookOrCommonDrl"/>
			</element>
		(См объявление InfElemRefGroup в sample-DocumentationCore.xml.)
		
		yakovlev: Вообще то, так и было задумано :) Ну, наверное это и вправду не очень хорошо,
		так что теперь паттерн "InfElemRefGroups" убран, а элемент InfElemRefGroup матчится
		непосредственно внутри паттерна DocbookOrCommonDrl.
		
		По поводу начальных маленьких и больших буков - это было тоже специально сделано,
		все ради того чтобы различать паттерны которые матчат непосредсвенно элемент и все остальные.
		Но, вообще, пофиг, пусть так будет.
	-->
	
	<start>
		<choice>
			<ref name="ProductLine"/>
			<ref name="DocumentationCore"/>
			<ref name="ProductDocumentation"/>
		</choice>
	</start>
	
	<define name="ProductLine">
		<element name="ProductLine">
			<attribute name="name"/>
			<zeroOrMore>
				<element name="Product">
					<attribute name="id"/>
					<attribute name="name"/>
				</element>
			</zeroOrMore>
		</element>
	</define>
	
	<define name="ProductDocumentation">
		<element name="ProductDocumentation">
			<attribute name="productid"/>
			<zeroOrMore>
				<choice>
					<ref name="FinalInfProduct"/>
					<ref name="Dictionary"/>
				</choice>
			</zeroOrMore>
		</element>
	</define>
	
	<define name="DocumentationCore">
		<element name="DocumentationCore">
			<zeroOrMore>
				<choice>
					<ref name="InfProduct"/>
					<ref name="InfElement"/>
					<ref name="Dictionary"/>
				</choice>			
			</zeroOrMore>
		</element>
	</define>
	
	<define name="InfProduct">
		<element name="InfProduct">
			<attribute name="id"/>
			<attribute name="name"/>
			<ref name="DocbookOrCommonDrl"/>
		</element>
	</define>
	
	<define name="InfElement">
		<element name="InfElement">
			<attribute name="id"/>
			<attribute name="name"/>
			<ref name="DocbookOrCommonDrl"/>
		</element>
	</define>
	
	<define name="Dictionary">
		<element name="Dictionary">
			<attribute name="id"/>
			<zeroOrMore>
				<element name="Entry">
					<attribute name="id"/>
					<text/>
				</element>
			</zeroOrMore>
		</element>
	</define>
	
	<define name="FinalInfProduct">
		<element name="FinalInfProduct">
			<attribute name="id"/>
			<attribute name="infproductid"/>
			<zeroOrMore>
				<choice>
					<element name="SetValue">
						<attribute name="id"/>
						<attribute name="value"/>
						<empty/>
					</element>
					<element name="Adapter">
						<attribute name="infelemrefid"/>
						<zeroOrMore>
							<choice>
								<element name="Replace-Nest">
									<attribute name="nestid"/>
									<ref name="JustDocbook"/>
								</element>
								<element name="Insert-Before">
									<attribute name="nestid"/>
									<ref name="JustDocbook"/>
								</element>
								<element name="Insert-After">
									<attribute name="nestid"/>
									<ref name="JustDocbook"/>
								</element>
							</choice>
						</zeroOrMore>
					</element>
				</choice>
			</zeroOrMore>
		</element>
	</define>
	
	<define name="DocbookOrCommonDrl">
		<zeroOrMore>
			<choice>
				<text/>
				<element name="InfElemRef">
					<attribute name="id"/>
					<attribute name="infelemid"/>
					<optional>
						<attribute name="groupid"/>
						<attribute name="optional"/>
					</optional>
				</element>
				<element name="InfElemRefGroup">
					<attribute name="id"/>
					<attribute name="name"/>
					<attribute name="modifier">
						<choice>
							<value>ONE</value>
							<value>SET</value>
						</choice>
					</attribute>
				</element>
				<element name="DictRef">
					<attribute name="dictid"/>
					<attribute name="entryid"/>
				</element>
				<element name="Conditional">
					<attribute name="condition"/>
					<ref name="DocbookOrCommonDrl"/>
				</element>
				<element name="Nest">
					<attribute name="id"/>
					<optional>
						<attribute name="descr"/>
					</optional>
					<ref name="JustDocbook"/>
				</element>
				<!-- docbook element that may contain the 'common' pattern recursively -->
				<element>
					<nsName ns="http://docbook.org/ns/docbook"/>
					<zeroOrMore>
						<attribute>
							<anyName/>
						</attribute>
					</zeroOrMore>
					<ref name="DocbookOrCommonDrl"/>
				</element>
			</choice>
		</zeroOrMore>
	</define>
	
	<define name="JustDocbook">
		<zeroOrMore>
			<choice>
				<text/>
				<element>
					<nsName ns="http://docbook.org/ns/docbook"/>
					<zeroOrMore>
						<attribute>
							<anyName/>
						</attribute>
					</zeroOrMore>
					<ref name="JustDocbook"/>
				</element>
			</choice>
		</zeroOrMore>
	</define>
</grammar>