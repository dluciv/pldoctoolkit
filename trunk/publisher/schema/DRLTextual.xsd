<?xml version="1.0" encoding="UTF-8"?>
<!-- The DRL Schema -->
<!-- $Id$ -->
<xs:schema xmlns:drl="drl" xmlns:xs="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="drl">
  <xs:complexType name="ProductLine">
    <xs:sequence>
      <xs:element minOccurs="0" name="PLScheme" type="drl:PLScheme"/>
      <xs:element name="PLDocumentation" type="drl:PLDocumentation"/>
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" use="required"/>
  </xs:complexType>

  <!-- There's a diagram title on the product family diagram. We need a name here? -->
  <!-- A: see ProductLine/@name -->
  <xs:complexType name="PLScheme">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="Product" type="drl:Product"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="PLDocumentation">
    <xs:sequence>
      <xs:element name="DocumentationCore" type="drl:DocumentationCore"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="ProductDocumentation" type="drl:ProductDocumentation"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="ProductDocumentation">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="FinalInfProduct"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="Dictionary" type="drl:Dictionary"/>
      <xs:group maxOccurs="unbounded" minOccurs="0" ref="drl:_DirectoryGroup"/>
    </xs:sequence>
    <xs:attribute name="productid" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="Product">
    <xs:attribute name="name" type="xs:string" use="required"/>
    <xs:attribute name="id" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:group name="_DirectoryGroup">
    <xs:sequence>
      <xs:element name="Directory" type="drl:Directory"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="DirTemplate" type="drl:DirTemplate"/>
    </xs:sequence>
  </xs:group>

  <xs:complexType name="DocumentationCore">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="InfProduct" type="drl:InfProduct"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="InfElement" type="drl:InfElement"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="Dictionary" type="drl:Dictionary"/>
      <xs:group maxOccurs="unbounded" minOccurs="0" ref="drl:_DirectoryGroup"/>
    </xs:sequence>
    <!-- XXX does not contain "name" attribute! -->
    <!-- A: We don't need name here since Documentation core belongs to productline and is never referenced -->
  </xs:complexType>

  <xs:complexType mixed="true" name="InfElement">
    <xs:choice maxOccurs="unbounded" minOccurs="0">
      <xs:element name="Nest" type="drl:Nest"/>
      <xs:element name="InfElemRef" type="drl:InfElemRef"/>
      <xs:element name="InfElemRefGroup" type="drl:InfElemRefGroup"/>
      <xs:element name="DictRef" type="drl:DictRef"/>
      <xs:element name="DirRef" type="drl:DirRef"/>
    </xs:choice>
    <xs:attribute name="name" type="xs:string" use="required"/>
    <xs:attribute name="id" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:complexType mixed="true" name="InfProduct">
    <xs:choice maxOccurs="unbounded" minOccurs="0">
      <xs:element name="InfElemRef" type="drl:InfElemRef"/>
      <xs:element name="InfElemRefGroup" type="drl:InfElemRefGroup"/>
      <xs:element name="DictRef" type="drl:DictRef"/>
      <xs:element name="DirRef" type="drl:DirRef"/>
    </xs:choice>
    <xs:attribute name="name" type="xs:string" use="required"/>
    <xs:attribute name="id" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:complexType mixed="true" name="Nest">
    <xs:sequence>
      <xs:any/>
    </xs:sequence>
    <xs:attribute name="id" type="xs:string" use="required"/>
    <xs:attribute name="descr" type="xs:string" use="optional"/>
  </xs:complexType>

  <xs:simpleType name="groupmodifier">
    <xs:restriction base="xs:string">
      <xs:enumeration value="OR"/>
      <xs:enumeration value="XOR"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="InfElemRef">
    <xs:attribute name="id" type="xs:string" use="required"/>
    <xs:attribute name="infelem" type="xs:string" use="required"/>
    <xs:attribute name="group" type="xs:string" use="optional"/>
    <xs:attribute default="true" name="optional" type="xs:boolean" use="optional"/>
  </xs:complexType>

  <xs:complexType name="InfElemRefGroup">
    <xs:attribute name="id" type="xs:string" use="required"/>
    <xs:attribute name="name" type="xs:string" use="optional"/>
    <xs:attribute name="modifier" type="drl:groupmodifier" use="required"/>
  </xs:complexType>

  <xs:complexType name="Dictionary">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="Entry" type="drl:DictEntry"/>
    </xs:sequence>
    <xs:attribute name="id" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="DictEntry">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="id" type="xs:string"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="DirEntry">
    <xs:sequence>
      <xs:element name="Attr" type="drl:DirAttr"/>
    </xs:sequence>
    <xs:attribute name="id" type="xs:string"/>
  </xs:complexType>

  <xs:complexType mixed="true" name="DirAttr">
    <xs:sequence>
      <xs:any/>
    </xs:sequence>
    <xs:attribute name="id" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="DictRef">
    <xs:attribute name="dictid" type="xs:string"/>
    <xs:attribute name="entryid" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="DirRef">
    <xs:attribute name="templid" type="xs:string"/>
    <xs:attribute name="entryid" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="Directory">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="Entry" type="drl:DirEntry"/>
    </xs:sequence>
    <xs:attribute name="id" type="xs:string"/>
  </xs:complexType>

  <xs:complexType mixed="true" name="DirTemplate">
    <xs:sequence>
      <xs:element name="AttrRef" type="drl:DirAttrRef"/>
    </xs:sequence>
    <xs:attribute name="id" type="xs:string"/>
    <xs:attribute name="directoryid" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="DirAttrRef">
    <xs:attribute name="attrid" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="FinalInfProduct">
    <xs:choice maxOccurs="unbounded" minOccurs="0">
      <xs:element name="SetValue" type="drl:SetValue"/>
      <xs:element name="Adapter" type="drl:Adapter"/>
    </xs:choice>
    <xs:attribute name="id" type="xs:string"/>
    <xs:attribute name="productid" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="Adapter">
    <xs:choice maxOccurs="unbounded">
      <!-- XXX why don't we create a generic type 'nest' and derive from these  from it? -->
      <!-- A: you are welcom to propose such variant - please send me an example by e-mail -->
      <xs:element name="Insert-Before" type="drl:Insert-Before"/>
      <xs:element name="Insert-After" type="drl:Insert-After"/>
      <xs:element name="Delete-Nest" type="drl:Delete-Nest"/>
      <xs:element name="Replace-Nest" type="drl:Replace-Nest"/>
    </xs:choice>
    <xs:attribute name="infelemrefid" type="xs:string"/>
  </xs:complexType>

  <xs:complexType mixed="true" name="Insert-Before">
    <xs:sequence>
      <xs:any/>
    </xs:sequence>
    <xs:attribute name="nestid" type="xs:string"/>
  </xs:complexType>

  <xs:complexType mixed="true" name="Insert-After">
    <xs:sequence>
      <xs:any/>
    </xs:sequence>
    <xs:attribute name="nestid" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="Delete-Nest">
    <xs:attribute name="nestid" type="xs:string"/>
  </xs:complexType>

  <xs:complexType mixed="true" name="Replace-Nest">
    <xs:sequence>
      <xs:any/>
    </xs:sequence>
    <xs:attribute name="nestid" type="xs:string"/>
  </xs:complexType>

  <xs:complexType mixed="true" name="SetValue">
    <xs:sequence>
      <xs:any/>
    </xs:sequence>
    <xs:attribute name="id" type="xs:string"/>
  </xs:complexType>

  <!-- XXX shouldn't we exclude this from the schema? -->
  <!-- A: Why? -->
  <xs:complexType name="UseValue">
    <xs:attribute name="valueid" type="xs:string"/>
  </xs:complexType>

  <xs:complexType mixed="true" name="Conditional">
    <xs:sequence>
      <xs:any/>
    </xs:sequence>
    <xs:attribute name="condition" type="xs:string"/>
  </xs:complexType>

  <!-- The list of possible root elements: -->
  <xs:element name="ProductLine" type="drl:ProductLine"/>
  <xs:element name="DocumentationCore" type="drl:DocumentationCore"/>
  <xs:element name="ProductDocumentation" type="drl:ProductDocumentation"/>
</xs:schema>
