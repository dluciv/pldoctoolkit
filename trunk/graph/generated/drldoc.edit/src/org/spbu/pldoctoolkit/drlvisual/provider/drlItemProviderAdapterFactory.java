/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.spbu.pldoctoolkit.drlvisual.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.spbu.pldoctoolkit.drlvisual.util.drlAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class drlItemProviderAdapterFactory extends drlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final String copyright = "copyleft 2007";

	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public drlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);		
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spbu.pldoctoolkit.drlvisual.InfElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfElementItemProvider infElementItemProvider;

	/**
	 * This creates an adapter for a {@link org.spbu.pldoctoolkit.drlvisual.InfElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createInfElementAdapter() {
		if (infElementItemProvider == null) {
			infElementItemProvider = new InfElementItemProvider(this);
		}

		return infElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spbu.pldoctoolkit.drlvisual.InfProduct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfProductItemProvider infProductItemProvider;

	/**
	 * This creates an adapter for a {@link org.spbu.pldoctoolkit.drlvisual.InfProduct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createInfProductAdapter() {
		if (infProductItemProvider == null) {
			infProductItemProvider = new InfProductItemProvider(this);
		}

		return infProductItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spbu.pldoctoolkit.drlvisual.FinalInfProduct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinalInfProductItemProvider finalInfProductItemProvider;

	/**
	 * This creates an adapter for a {@link org.spbu.pldoctoolkit.drlvisual.FinalInfProduct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createFinalInfProductAdapter() {
		if (finalInfProductItemProvider == null) {
			finalInfProductItemProvider = new FinalInfProductItemProvider(this);
		}

		return finalInfProductItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spbu.pldoctoolkit.drlvisual.Adapter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdapterItemProvider adapterItemProvider;

	/**
	 * This creates an adapter for a {@link org.spbu.pldoctoolkit.drlvisual.Adapter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createAdapterAdapter() {
		if (adapterItemProvider == null) {
			adapterItemProvider = new AdapterItemProvider(this);
		}

		return adapterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spbu.pldoctoolkit.drlvisual.NestPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NestPointItemProvider nestPointItemProvider;

	/**
	 * This creates an adapter for a {@link org.spbu.pldoctoolkit.drlvisual.NestPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createNestPointAdapter() {
		if (nestPointItemProvider == null) {
			nestPointItemProvider = new NestPointItemProvider(this);
		}

		return nestPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spbu.pldoctoolkit.drlvisual.Condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.spbu.pldoctoolkit.drlvisual.Condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spbu.pldoctoolkit.drlvisual.NestPointRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NestPointRefItemProvider nestPointRefItemProvider;

	/**
	 * This creates an adapter for a {@link org.spbu.pldoctoolkit.drlvisual.NestPointRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createNestPointRefAdapter() {
		if (nestPointRefItemProvider == null) {
			nestPointRefItemProvider = new NestPointRefItemProvider(this);
		}

		return nestPointRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spbu.pldoctoolkit.drlvisual.InfElemRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfElemRefItemProvider infElemRefItemProvider;

	/**
	 * This creates an adapter for a {@link org.spbu.pldoctoolkit.drlvisual.InfElemRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createInfElemRefAdapter() {
		if (infElemRefItemProvider == null) {
			infElemRefItemProvider = new InfElemRefItemProvider(this);
		}

		return infElemRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spbu.pldoctoolkit.drlvisual.InfElemRefGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfElemRefGroupItemProvider infElemRefGroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.spbu.pldoctoolkit.drlvisual.InfElemRefGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createInfElemRefGroupAdapter() {
		if (infElemRefGroupItemProvider == null) {
			infElemRefGroupItemProvider = new InfElemRefGroupItemProvider(this);
		}

		return infElemRefGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spbu.pldoctoolkit.drlvisual.ProductLine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductLineItemProvider productLineItemProvider;

	/**
	 * This creates an adapter for a {@link org.spbu.pldoctoolkit.drlvisual.ProductLine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createProductLineAdapter() {
		if (productLineItemProvider == null) {
			productLineItemProvider = new ProductLineItemProvider(this);
		}

		return productLineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spbu.pldoctoolkit.drlvisual.PLScheme} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PLSchemeItemProvider plSchemeItemProvider;

	/**
	 * This creates an adapter for a {@link org.spbu.pldoctoolkit.drlvisual.PLScheme}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createPLSchemeAdapter() {
		if (plSchemeItemProvider == null) {
			plSchemeItemProvider = new PLSchemeItemProvider(this);
		}

		return plSchemeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spbu.pldoctoolkit.drlvisual.PLDocumentation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PLDocumentationItemProvider plDocumentationItemProvider;

	/**
	 * This creates an adapter for a {@link org.spbu.pldoctoolkit.drlvisual.PLDocumentation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createPLDocumentationAdapter() {
		if (plDocumentationItemProvider == null) {
			plDocumentationItemProvider = new PLDocumentationItemProvider(this);
		}

		return plDocumentationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spbu.pldoctoolkit.drlvisual.Product} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductItemProvider productItemProvider;

	/**
	 * This creates an adapter for a {@link org.spbu.pldoctoolkit.drlvisual.Product}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createProductAdapter() {
		if (productItemProvider == null) {
			productItemProvider = new ProductItemProvider(this);
		}

		return productItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spbu.pldoctoolkit.drlvisual.DocumentationCore} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentationCoreItemProvider documentationCoreItemProvider;

	/**
	 * This creates an adapter for a {@link org.spbu.pldoctoolkit.drlvisual.DocumentationCore}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDocumentationCoreAdapter() {
		if (documentationCoreItemProvider == null) {
			documentationCoreItemProvider = new DocumentationCoreItemProvider(this);
		}

		return documentationCoreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spbu.pldoctoolkit.drlvisual.ProductDocumentation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductDocumentationItemProvider productDocumentationItemProvider;

	/**
	 * This creates an adapter for a {@link org.spbu.pldoctoolkit.drlvisual.ProductDocumentation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createProductDocumentationAdapter() {
		if (productDocumentationItemProvider == null) {
			productDocumentationItemProvider = new ProductDocumentationItemProvider(this);
		}

		return productDocumentationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spbu.pldoctoolkit.drlvisual.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link org.spbu.pldoctoolkit.drlvisual.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spbu.pldoctoolkit.drlvisual.Schema} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SchemaItemProvider schemaItemProvider;

	/**
	 * This creates an adapter for a {@link org.spbu.pldoctoolkit.drlvisual.Schema}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSchemaAdapter() {
		if (schemaItemProvider == null) {
			schemaItemProvider = new SchemaItemProvider(this);
		}

		return schemaItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (infElementItemProvider != null) infElementItemProvider.dispose();
		if (infProductItemProvider != null) infProductItemProvider.dispose();
		if (finalInfProductItemProvider != null) finalInfProductItemProvider.dispose();
		if (adapterItemProvider != null) adapterItemProvider.dispose();
		if (nestPointItemProvider != null) nestPointItemProvider.dispose();
		if (conditionItemProvider != null) conditionItemProvider.dispose();
		if (nestPointRefItemProvider != null) nestPointRefItemProvider.dispose();
		if (infElemRefItemProvider != null) infElemRefItemProvider.dispose();
		if (infElemRefGroupItemProvider != null) infElemRefGroupItemProvider.dispose();
		if (productLineItemProvider != null) productLineItemProvider.dispose();
		if (plSchemeItemProvider != null) plSchemeItemProvider.dispose();
		if (plDocumentationItemProvider != null) plDocumentationItemProvider.dispose();
		if (productItemProvider != null) productItemProvider.dispose();
		if (documentationCoreItemProvider != null) documentationCoreItemProvider.dispose();
		if (productDocumentationItemProvider != null) productDocumentationItemProvider.dispose();
		if (variableItemProvider != null) variableItemProvider.dispose();
		if (schemaItemProvider != null) schemaItemProvider.dispose();
	}

}
